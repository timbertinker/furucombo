import { Router as RouterContract } from './contracts';
import { PermitBatch, PermitSingle } from '@uniswap/permit2-sdk';
import { BigNumberish, BytesLike } from 'ethers';
import { DataType, RouterInterface } from './contracts/Router';
import { Permit2Interface } from './contracts/Permit2';
import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer';
import * as common from '@protocolink/common';
export declare class RouterKit extends common.Web3Toolkit {
    private _routerIface?;
    get routerIface(): RouterInterface;
    private _router?;
    get router(): RouterContract;
    getAgentImplementationAddress(): Promise<string>;
    getDefaultCollector(): Promise<string>;
    getDefaultReferral(): Promise<string>;
    getPermit2Address(): Promise<string>;
    private _permit2Iface?;
    get permit2Iface(): Permit2Interface;
    calcAgent(account: string): Promise<string>;
    getPermit2PermitData(account: string, inputs: common.TokenAmounts): Promise<import("@uniswap/permit2-sdk").PermitSingleData | import("@uniswap/permit2-sdk").PermitBatchData | undefined>;
    getPermit2Approvals(account: string, inputs: common.TokenAmounts): Promise<{
        value?: BigNumberish | undefined;
        gasLimit?: BigNumberish | undefined;
        to: string;
        data: BytesLike;
    }[]>;
    encodePermit2Permit(account: string, permit: PermitSingle | PermitBatch, sig: string): string;
    encodePermit2TransferFrom(account: string, inputs: common.TokenAmounts): Promise<string>;
    buildLogicBatchTypedData(values: DataType.LogicBatchStruct): {
        domain: TypedDataDomain;
        types: Record<string, TypedDataField[]>;
        values: DataType.LogicBatchStruct;
    };
    buildExecuteTransactionRequest(options: {
        permit2Datas?: string[];
        routerLogics: DataType.LogicStruct[];
        tokensReturn?: string[];
        value?: BigNumberish;
    }): common.TransactionRequest;
    buildExecuteWithSignerFeeTransactionRequest(options: {
        permit2Datas?: string[];
        routerBatchLogics: DataType.LogicBatchStruct;
        signer: string;
        signature: BytesLike;
        tokensReturn?: string[];
        value?: BigNumberish;
        referralCode?: number;
    }): common.TransactionRequest;
}
