import { Signer } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { Router, RouterInterface } from '../Router';
export declare class Router__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "wrappedNative";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "permit2";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "deployer";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AgentAlreadyCreated";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AlreadyPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ExcessiveInvalidation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidDelegatee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidFeeCollector";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidNewPauser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPauser";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "InvalidSigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotReady";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "SignatureExpired";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "agent";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "AgentCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint128";
            readonly name: "expiry";
            readonly type: "uint128";
        }];
        readonly name: "Delegated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint128";
            readonly name: "newNonce";
            readonly type: "uint128";
        }, {
            readonly indexed: false;
            readonly internalType: "uint128";
            readonly name: "oldNonce";
            readonly type: "uint128";
        }];
        readonly name: "DelegationNonceInvalidation";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "agent";
            readonly type: "address";
        }];
        readonly name: "Executed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newNonce";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldNonce";
            readonly type: "uint256";
        }];
        readonly name: "ExecutionNonceInvalidation";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "feeCollector_";
            readonly type: "address";
        }];
        readonly name: "FeeCollectorSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "feeRate_";
            readonly type: "uint256";
        }];
        readonly name: "FeeRateSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "pauser";
            readonly type: "address";
        }];
        readonly name: "PauserSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "SignerAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "SignerRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "addSigner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "agentImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "agents";
        readonly outputs: readonly [{
            readonly internalType: "contract IAgent";
            readonly name: "agent";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly internalType: "uint128";
            readonly name: "expiry";
            readonly type: "uint128";
        }];
        readonly name: "allow";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "delegatee";
                readonly type: "address";
            }, {
                readonly internalType: "uint128";
                readonly name: "expiry";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nonce";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint256";
                readonly name: "deadline";
                readonly type: "uint256";
            }];
            readonly internalType: "struct DataType.DelegationDetails";
            readonly name: "details";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "allowBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "calcAgent";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentUser";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultCollector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultReferral";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "delegations";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "expiry";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nonce";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "disallow";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "domainSeparator";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "permit2Datas";
            readonly type: "bytes[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "balanceBps";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amountOrOffset";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct DataType.Input[]";
                readonly name: "inputs";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "enum DataType.WrapMode";
                readonly name: "wrapMode";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "approveTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "callback";
                readonly type: "address";
            }];
            readonly internalType: "struct DataType.Logic[]";
            readonly name: "logics";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "tokensReturn";
            readonly type: "address[]";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes[]";
                readonly name: "permit2Datas";
                readonly type: "bytes[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "data";
                    readonly type: "bytes";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "token";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "balanceBps";
                        readonly type: "uint256";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amountOrOffset";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct DataType.Input[]";
                    readonly name: "inputs";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "enum DataType.WrapMode";
                    readonly name: "wrapMode";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "approveTo";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "callback";
                    readonly type: "address";
                }];
                readonly internalType: "struct DataType.Logic[]";
                readonly name: "logics";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "tokensReturn";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "deadline";
                readonly type: "uint256";
            }];
            readonly internalType: "struct DataType.ExecutionDetails";
            readonly name: "details";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "executeBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes[]";
                readonly name: "permit2Datas";
                readonly type: "bytes[]";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "to";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "data";
                        readonly type: "bytes";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "address";
                            readonly name: "token";
                            readonly type: "address";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "balanceBps";
                            readonly type: "uint256";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amountOrOffset";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct DataType.Input[]";
                        readonly name: "inputs";
                        readonly type: "tuple[]";
                    }, {
                        readonly internalType: "enum DataType.WrapMode";
                        readonly name: "wrapMode";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "address";
                        readonly name: "approveTo";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address";
                        readonly name: "callback";
                        readonly type: "address";
                    }];
                    readonly internalType: "struct DataType.Logic[]";
                    readonly name: "logics";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "token";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amount";
                        readonly type: "uint256";
                    }, {
                        readonly internalType: "bytes32";
                        readonly name: "metadata";
                        readonly type: "bytes32";
                    }];
                    readonly internalType: "struct DataType.Fee[]";
                    readonly name: "fees";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "bytes32[]";
                    readonly name: "referrals";
                    readonly type: "bytes32[]";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "deadline";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct DataType.LogicBatch";
                readonly name: "logicBatch";
                readonly type: "tuple";
            }, {
                readonly internalType: "address[]";
                readonly name: "tokensReturn";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "deadline";
                readonly type: "uint256";
            }];
            readonly internalType: "struct DataType.ExecutionBatchDetails";
            readonly name: "details";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "userSignature";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "signerSignature";
            readonly type: "bytes";
        }];
        readonly name: "executeBySigWithSignerFee";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permit2Datas";
            readonly type: "bytes[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "balanceBps";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amountOrOffset";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct DataType.Input[]";
                readonly name: "inputs";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "enum DataType.WrapMode";
                readonly name: "wrapMode";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "approveTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "callback";
                readonly type: "address";
            }];
            readonly internalType: "struct DataType.Logic[]";
            readonly name: "logics";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "tokensReturn";
            readonly type: "address[]";
        }];
        readonly name: "executeFor";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permit2Datas";
            readonly type: "bytes[]";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "data";
                    readonly type: "bytes";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "token";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "balanceBps";
                        readonly type: "uint256";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amountOrOffset";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct DataType.Input[]";
                    readonly name: "inputs";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "enum DataType.WrapMode";
                    readonly name: "wrapMode";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "approveTo";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "callback";
                    readonly type: "address";
                }];
                readonly internalType: "struct DataType.Logic[]";
                readonly name: "logics";
                readonly type: "tuple[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "metadata";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct DataType.Fee[]";
                readonly name: "fees";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "referrals";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "deadline";
                readonly type: "uint256";
            }];
            readonly internalType: "struct DataType.LogicBatch";
            readonly name: "logicBatch";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "address[]";
            readonly name: "tokensReturn";
            readonly type: "address[]";
        }];
        readonly name: "executeForWithSignerFee";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "permit2Datas";
            readonly type: "bytes[]";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "data";
                    readonly type: "bytes";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "token";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "balanceBps";
                        readonly type: "uint256";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amountOrOffset";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct DataType.Input[]";
                    readonly name: "inputs";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "enum DataType.WrapMode";
                    readonly name: "wrapMode";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address";
                    readonly name: "approveTo";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "callback";
                    readonly type: "address";
                }];
                readonly internalType: "struct DataType.Logic[]";
                readonly name: "logics";
                readonly type: "tuple[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "metadata";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct DataType.Fee[]";
                readonly name: "fees";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "referrals";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "deadline";
                readonly type: "uint256";
            }];
            readonly internalType: "struct DataType.LogicBatch";
            readonly name: "logicBatch";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "address[]";
            readonly name: "tokensReturn";
            readonly type: "address[]";
        }];
        readonly name: "executeWithSignerFee";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "executionNonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "feeRate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "getAgent";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentUserAgent";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly internalType: "uint128";
            readonly name: "newNonce";
            readonly type: "uint128";
        }];
        readonly name: "invalidateDelegationNonces";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newNonce";
            readonly type: "uint256";
        }];
        readonly name: "invalidateExecutionNonces";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "newAgent";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "newAgent";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pauser";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "removeSigner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "rescue";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "feeCollector_";
            readonly type: "address";
        }];
        readonly name: "setFeeCollector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "feeRate_";
            readonly type: "uint256";
        }];
        readonly name: "setFeeRate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "pauser_";
            readonly type: "address";
        }];
        readonly name: "setPauser";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): RouterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Router;
}
